package com.cy.downloader.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.cy.downloader.database.entity.DownloadInfo;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table DOWNLOAD_INFO.
*/
public class DownloadInfoDao extends AbstractDao<DownloadInfo, Long> {

    public static final String TABLENAME = "DOWNLOAD_INFO";

    /**
     * Properties of entity DownloadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AppName = new Property(1, String.class, "appName", false, "APP_NAME");
        public final static Property Size = new Property(2, String.class, "size", false, "SIZE");
        public final static Property DeepLink = new Property(3, String.class, "deepLink", false, "DEEP_LINK");
        public final static Property PackageName = new Property(4, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property RealUrl = new Property(6, String.class, "realUrl", false, "REAL_URL");
        public final static Property FileMd5 = new Property(7, String.class, "fileMd5", false, "FILE_MD5");
        public final static Property Progress = new Property(8, Long.class, "progress", false, "PROGRESS");
        public final static Property TotalSize = new Property(9, Long.class, "totalSize", false, "TOTAL_SIZE");
        public final static Property State = new Property(10, Integer.class, "state", false, "STATE");
    };


    public DownloadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DOWNLOAD_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'APP_NAME' TEXT," + // 1: appName
                "'SIZE' TEXT," + // 2: size
                "'DEEP_LINK' TEXT," + // 3: deepLink
                "'PACKAGE_NAME' TEXT," + // 4: packageName
                "'URL' TEXT," + // 5: url
                "'REAL_URL' TEXT," + // 6: realUrl
                "'FILE_MD5' TEXT," + // 7: fileMd5
                "'PROGRESS' INTEGER," + // 8: progress
                "'TOTAL_SIZE' INTEGER," + // 9: totalSize
                "'STATE' INTEGER);"); // 10: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DOWNLOAD_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DownloadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(2, appName);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(3, size);
        }
 
        String deepLink = entity.getDeepLink();
        if (deepLink != null) {
            stmt.bindString(4, deepLink);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(5, packageName);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String realUrl = entity.getRealUrl();
        if (realUrl != null) {
            stmt.bindString(7, realUrl);
        }
 
        String fileMd5 = entity.getFileMd5();
        if (fileMd5 != null) {
            stmt.bindString(8, fileMd5);
        }
 
        Long progress = entity.getProgress();
        if (progress != null) {
            stmt.bindLong(9, progress);
        }
 
        Long totalSize = entity.getTotalSize();
        if (totalSize != null) {
            stmt.bindLong(10, totalSize);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(11, state);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DownloadInfo readEntity(Cursor cursor, int offset) {
        DownloadInfo entity = new DownloadInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // size
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deepLink
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // packageName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // realUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fileMd5
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // progress
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // totalSize
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // state
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DownloadInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSize(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeepLink(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPackageName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRealUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFileMd5(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProgress(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setTotalSize(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setState(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DownloadInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DownloadInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
